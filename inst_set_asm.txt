命令実行中に参照するプログラムカウンタPCは、次命令のアドレスを指している。

命令形式
 - R   Rレジスタ*3
       opcode(31-26),rs(25-21),rt(20-16),rd(15-11),amt(10-6),func(5-0)
 - I   Rレジスタ*2, 即値(16bit)
       opcode(31-26),rs(25-21),rt(20-16),imm(15-0)
 - J   即値(26bit)
       opcode(31-26),addr(25-0)
 - FR  Fレジスタ*3
       opcode(31-26),fs(25-21),ft(20-16),fd(15-11),amt(10-6),func(5-0)
 - FI  Fレジスタ*2, 即値(16bit)
       opcode(31-26),fs(25-21),ft(20-16),imm(15-0)
 - MR  Rレジスタ*2, Fレジスタ*1
       opcode(31-26),rs(25-21),rt(20-16),fd(15-11),amt(10-6),func(5-0)
 - MI  Rレジスタ*1, Fレジスタ*1, 即値(16bit)
       opcode(31-26),rs(25-21),ft(20-16),imm(15-0)

**算術演算命令**
R  add  rd rs rt   R[rd] = R[rs] + R[rt]
R  sub  rd rs rt   R[rd] = R[rs] - R[rt]

FR addf fd fs ft   F[fd] = F[fs] +. F[ft]
FR subf fd fs ft   F[fd] = F[fs] -. F[ft]
FR mulf fd fs ft   F[fd] = F[fs] *. F[ft]
FR divf fd fs ft   F[fd] = F[fs] /. F[ft]

I  addi rt rs imm  R[rt] = R[rs] + imm
I  subi rt rs imm  R[rt] = R[rs] - imm

**算術演算命令その2**
FR sqrt fd fs      F[fd] = sqrt(F[fs])  // 平方根

**論理演算命令**
R  and  rd rs rt   R[rd] = R[rs] and R[rt]
R  or   rd rs rt   R[rd] = R[rs] or  R[rt]
R  nor  rd rs rt   R[rd] = R[rs] nor R[rt]
R  xor	rd rs rt   R[rd] = R[rs] xor R[rt]

I  andi rt rs imm  R[rt] = R[rs] and imm
I  ori  rt rs imm  R[rt] = R[rs] or  imm

**シフト命令**
R  sll  rd rs amt  R[rd] = R[rs] <<  amt    // shift left logical
R  srl  rd rs amt  R[rd] = R[rs] >>  amt    // shift right logical
R  sra  rd rs amt  R[rd] = R[rs] >>> amt    // shift right arith.

**ロード/ストア命令**
R  lw   rd rs rt   R[rd] = M[R[rs] + R[rt]]    // load word
I  lwi  rt rs imm  R[rt] = M[R[rs] + imm]
R  sw   rd rs rt   M[R[rs] + R[rt]] = R[rd]    // store word
I  swi  rt rs imm  M[R[rs] + imm] = R[rt]

MR lwf  fd rs rt   F[fd] = M[R[rs] + R[rt]]
MI lwif ft rs imm  F[ft] = M[R[rs] + imm]
MR swf  fd rs rt   M[R[rs] + R[rt]] = F[fd]
MI swif ft rs imm  M[R[rs] + imm] = F[ft]

**比較命令**
R  cmp  rd rs rt   R[rd] = (R[rs] <= R[rt]) ? 1 : 0    // compare less than or equal
FR cmpf fd fs ft   F[fd] = (F[fs] <= F[ft]) ? 1 : 0

**無条件分岐命令**
J  j    addr       PC = PC{31:26} @ addr              // jump
J  jl   addr       $ra = PC; PC = PC{31:26} @ addr    // jump and linked
R  jr   rs         PC = R[rs]                         // jump register

**条件分岐命令**
I  beq  rs rt imm  if (R[rs] == R[rt]) PC = PC + imm    // branch on equal
I  bne  rs rt imm  if (R[rs] != R[rt]) PC = PC + imm    // branch on not equal
FI beqf fs ft imm  if (F[fs] == F[ft]) PC = PC + imm
FI bnef fs ft imm  if (F[fs] != F[ft]) PC = PC + imm

**移動命令**
R  mv   rd rs      R[rd] = R[rs]    // move
FR mvf  fd fs      F[fd] = F[fs]

**その他**
-  nop
-  dbg     // シミュレータ用デバッグ命令(コアではnopと同義)
-  halt    // 停止
-  rst     // レジスタをリセット

**10/09削除**
R  mul  rs rt      Hi @ Lo = R[rs] * R[rt]
R  div  rs rt      Lo = R[rs] / R[rt]; Hi = R[rs] % R[rt]

R  abs  rd rs      R[rd] = | R[rs] |    // 絶対値
R  neg  rd rs      R[rd] = - (R[rs])    // 符号反転
FR absf fd fs      F[fd] = | F[fs] |
FR negf fd fs      F[fd] = - (F[fs])

R  mfhi rd         R[rd] = Hi    // move from Hi
R  mflo rd         R[rd] = Lo    // move from Lo
