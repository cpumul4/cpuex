24ばん 作業記録
**01/16Wed
パイプラインを7段(PC,IF,ID/RF,EX1,EX2/MEM1,EX3/MEM2,WB)に
→44MHz/54.18sec(ストールの増加)
パイプラインを8段(PC,IF,ID/RF,FW,EX1,EX2/MEM1,EX3/MEM2,WB)に
→44MHz/78.21sec(ストールの増加)
クロックを66MHzに
→66MHz/52.18sec(遅い…)
ストールが常に2以上になる設計を修正
I/O間のストールを増やす
→66MHz/44.77sec
**01/15Tue
(進捗発表、突然の最終回)
**01/14Mon
大雪!!
ftoiを3段にして高速化
→実行時間はほとんど変わらず(51.11sec)
**01/13Sun
**01/12Sat
**01/11Fri
ここからver2.5
floor,itofを3段にして高速化
→実行時間は微増(51.10sec->51.11sec)
**01/10Thu
レイトレのシミュレーションでバグ発見
直前の命令がInput命令であるInput命令も1ストールするようにした
→完動(44MHz/11.58億命令/51.1sec)
**01/09Wed
I/OでRS_RXをラッチで受けるようにする(今まで直接参照してた)
クロックを44MHzに
I/Oのシミュレーションモデルがファイル入出力できるようにした(命令ロード/Output)
直前の命令がOutput命令であるOutput命令は1ストールするようにした
mandelbrot成功(55.65sec:送信バッファを大きくすれば短縮できる)
**01/08Tue
クロックを分周して33MHzに
命令メモリをwrite-first modeに
2nd_testbenchが通った
min-rt,mandelbrotはよく分からない絵が出た
I/Oがやや不安定なことが発覚
**01/07Mon
実機テスト(ver2.4)→不安定
クロックを分周して44MHzに→安定
ftoi,itofのデコードにミス→修正したものが不安定
**01/06Sun
**01/05Sat
7段パイプライン(ver2.5,ver2.6)を設計(未実装)
**01/04Fri
命令メモリをno-change modeに変える(今までの書き方がread-first modeで遅かったことが判明)
気を取り直して6段パイプライン(ver2.4)を書き直す:IF,ID/RF,EX1,EX2/MEM1,EX3/MEM2,WB
ghdlを導入しようとして挫折(コアまるごとのシミュレーションは重すぎた)
**01/03Thu
2ndArch開発の第2部を開始(自分を奮い立たせる)
よりきれいな設計について考える→3rdArchに回すことにした
**01/02Wed
**01/01Tue
(あけましておめでとうございます)
**12/31Mon
**12/30Sun
**12/29Sat
**12/28Fri
**12/27Thu
(地下が閉まった)
**12/26Wed
**12/25Tue
ALU,FPUで分岐の成立を判定するようにする(今まではEQ,LTEを判定するだけ)
パイプラインの段数を増やしてみる
→対応が間に合わず(年内の完動は絶望)
現状、PC決定→命令フェッチがクリティカルパスになっている、命令列のロードに失敗している
=>命令メモリ(blockRAM)まわりで何かが起きている気がする
**12/24Mon
faddをfadd_200に差し替える
命令メモリの出力を非同期にする
バイパスをやめてとりあえずストールするようにする
→まだ正しく動作しない
**12/23Sun
**12/22Sat
**12/21Fri
itof,ftoiを3clkに
→まだ正しく動作しない
**12/20Thu
jr,jlrの遅延を2にしてbranchと揃える→動作安定版ができる
float演算組み込み
ftoiを3clkに
FPU各モジュールの出力をラッチで受けるように変更(仕様の勘違い)
→不安定動作
**12/19Wed
float演算を抜いたコアで実機テスト
PC決定、データハザード検出(ストール/バイパス判定)を書き直し(ロジック簡素化)
**12/18Tue
命令ローダの実機テスト→ちゃんと動く
**12/17Mon
命令ローダの実機テスト
**12/16Sun
**12/15Sat
デバッグ(迷走)
**12/14Fri
パイプラインコアのシミュレーション
固定値命令メモリを用いたパイプラインコアの実機テスト
3,4行の簡単な命令列で、jump register,branch,data hazard処理の簡単な場合の動作確認
アセンブラ完成→fibがシミュレータ上で動作、実機では確率的動作
**12/13Thu
RS232Cシミュレーションモデル作成(コアに命令列やデータを送信/コアからデータを受信)
パイプラインコアのシミュレーション
命令ローダの動作確認(シミュレータ上)
**12/12Wed
分岐判定をもう1clk遅らせる(2つあとの命令をデコードするときに判定)
論理合成デバッグ→それらしいものができた
**12/11Tue
パイプラインコアの実装
論理合成デバッグ→長大なパスを発見
**12/10Mon
パイプラインの各モジュール設計つづき(擬似コードレベル)
パイプラインの各モジュール実装
**12/09Sun
パイプラインの各モジュール設計(擬似コードレベル)
**12/08Sat
**12/07Fri
パイプライン化したデータバス設計
**12/06Thu
パイプライン化したデコーダのステート設計
**12/05Wed
パイプライン化について考える
**12/04Tue
コア実装の変更(命令追加、FPUが3clkに)
パイプライン化について考える
**12/03Mon
コア実装
レジスタ指定のBRANCH命令を追加
**12/02Sun
デコーダ設計(擬似コードレベル)
Inputコントローラ仕様変更(5バイトモード追加)
**12/01Sat
オペコード決定
信号生成のロジック設計
**11/30Fri
**11/29Thu
信号の整理
**11/28Wed
データバス設計
デコーダのステート設計
**11/27Tue
itof,ftoi,floorのハードウェア実装
2nd ISAの変更
ALU,FPU(暫定)の2nd ISAへの対応完了
**11/26Mon
(スライド作っただけ)
**11/25Sun
(駒場祭3日目)
**11/24Sat
(駒場祭2日目)
**11/23Fri
(駒場祭1日目)
**11/22Thu
(何か他のことやってた)
**11/21Wed
ALU実装
**11/20Tue
2nd ISAを決める
**11/19Mon
シミュレータ拡張とFPUデバッグにより完動!!!!!
1st Architecture完成(ver1.3)
**11/18Sun
最新版fdivを入れたコアが改めてやったら動いた(!!)
**11/17Sat
(地下に行けず)
**11/16Fri
(どうやって誤差とるの…)
**11/15Thu
可変レイテンシに実装変更
FPU組み込み
絵でた!!!!!
**11/14Wed
FPU組み込み開始
**11/13Tue
**11/12Mon
**11/11Sun
**11/10Sat
**11/09Fri
**11/08Thu
パタヘネp303- ぼちぼち。
**11/07Wed
(他のこと考えてた)
**11/06Tue
(主に寝てた)
**11/05Mon
div通った!!
ver1.2は完成していた
**11/04Sun
命令ローダのバグ取り
ver1.2完成(div以外のテストベンチfib,ack(30sec),tarai(10sec)は通った)
**11/03Sat
命令ローダのバグ取り→ロードはできるが実行結果が変
**11/02Fri
(他のことやってた)
**11/01Thu
(他のことやってた)
**10/31Wed
inputのバグ解消
RS232Cのパリティビットをなくす
ver1.1完成
命令ローダ実装→訳の分からない挙動
**10/30Tue
inputのバグとり(わけわかめ)
**10/29Mon
命令ローダ実装
inputのバグ発見
**10/28Sun
デコーダ実装
コアでfib30完動!!!!!!(^^)(^^)(^^)
**10/27Sat
デコーダ実装(次のPCをデコーダが決める)
**10/26Fri
デコーダをステートマシンにする(ステートマシンとコアの同期に問題あり)
**10/25Thu
デコーダシミュレーション
コア実装
fib5がシミュレータ上で動いた
**10/24Wed
命令コード決めた
デコーダ実装
**10/23Tue
ALU実装の変更
制御が必要な部分の洗い出し
**10/22Mon
命令メモリ、汎用レジスタ、SRAMシミュレーションモデルの動作確認
データバス確認、デコーダ実装
**10/21Sun
ALUシミュレーション、テスト
データバス構成要素の実装(命令メモリ、汎用レジスタ、SRAMシミュレーションモデル)
**10/20Sat
シフタのシミュレーション
**10/19Fri
I/Oコントローラ実装完了!!(1週間かかってた…)
SRAMコントローラ改良
ALU実装、シフタ実装
**10/18Thu
I/Oコントローラシミュレーションつづき
**10/17Wed
(他の課題やってた)
**10/16Tue
I/Oコントローラ実装→動作テスト中(ModelSim)
**10/15Mon
I/Oコントローラ実装→コンパイル通らず→設計やり直し
**10/14Sun
I/Oコントローラ設計つづき
**10/13Sat
I/Oコントローラロード/ストア部分設計
**10/12Fri
1stアーキテクチャ整理
I/Oコントローラ通信部分設計
**10/11Thu
ボーレートとクロック周波数、RS232C通信モジュールのwtimeについて考察
審判サーバの動作、レイトレの入出力、I/Oの実装についてまとめる
レイトレの実行方法を考える
**10/10Wed
命令コード決定
デコード表作成
I/Oについて考え始める
**10/09Tue
命令セット変更(mul,div,mfhi,mflo,neg,negf,abs,absf削除 xor追加)
データパス&制御ユニット設計
制御信号の整理
レジスタ内訳の決定
**10/08Mon
命令変更(clt,cltf -> cmp,cmpf)
命令セットをスライドにまとめる
**10/07Sun
データパス&制御ユニット設計
**10/06Sat
タスク整理
制御信号の洗い出し
**10/05Fri
パタヘネとりあえず必要そうな部分読了
命令形式決定
データパス設計
**10/04Thu
パタヘネ-p302
命令セット追加
アドレシングモード整理
**10/03Wed
パタヘネ-p275
命令セット決め
**10/02Tue
パタヘネ-p137
