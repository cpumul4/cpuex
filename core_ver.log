コアのバージョン記録

**ver1.0(core1_0)
10/28Sun完成
1st Architecture
周波数 : 66MHz
ボーレート : 115200
送受信バッファサイズ : 各256バイト
逐次実行
CPI : 4固定

 - 固定値命令メモリを使用(命令ローダなし)
 - 整数演算(FPUなし)
 - fib30が動く

**ver1.1(core1_1)
10/31Wed完成

 - ver1.0の入出力に関するマイナーチェンジ
 - RE,WE系の信号の初期値を与える : decoder.vhd
 - inputのバグ(.ucfファイルの記載漏れ)を修正 : CPUEV2.ucf
 - RS232Cのパリティビットをなしに変更 : sender.vhd,receiver.vhd

**ver1.2(core1_2)
11/04Sun完成

 - ver1.1に命令ローダを搭載
 - 命令列を送信すると、最初の16命令の下位1バイトをループバックした後プログラムを実行する

**ver1.3(core1_3) : 1st Architecture完動コア
11/19Mon完成
CPI : 基本 4, addf/subf/mulf 7, divf/sqrt 11

 - ver1.2にFPUを組み込み
 - 命令列はループバックせず0xaaを送信
 - 可変レイテンシ

**ver2.1(core2_1)
作業中(実装済、未実行)→却下
2nd Architecture
逐次実行
CPI : 基本 2, 分岐 3, ロード/ストア 4, fadd/fsub/fmul/finv/sqrt 4

 - 実行前にver2.2の実装が完了したので、却下

**ver2.2(core2_2)
作業中(実装済、論理合成済)→放棄
パイプライン実行

 - レジスタフォワーディング
 - jr/jlrは1ストール
 - I/O禁止時(Inputバッファが空/Outputバッファが満杯)はnストール
 - 先行命令がfadd/fsub/fmul/finv/sqrtまたはロード/ストアでデータハザードが解消できない場合は1or2ストール
 - BRANCH命令は直後の2命令を投機的実行(常に分岐不成立と予測)

 - クロックがぎりぎりで意味の分からない挙動をするので、このバージョンでのデバッグを放棄

**ver2.3(core2_3)
作業中(デバッグ中)→12/24Mon放棄

 - ver2.2においてPC決定、データハザード検出(ストール/バイパス判定)のロジックを簡素化
 - itof,ftoiを3clkに
 - jr,jlrも2ストール

 - float演算なしで安定動作可能
 - float演算組み込みで不安定動作

**ver2.4(core2_4)
01/10Thu完動
6段パイプライン : IF,ID/RF,EX1,EX2/MEM1,EX3/MEM2,WB
44MHz
送信バッファ : 4096byte

 - 命令メモリをread-first modeからwrite-first modeに
 - j,jl : 遅延なし
 - branch不成立時 : 実質遅延なし(投機的実行)
 - jr,jlr,branch成立時 : 遅延2
 - fadd,fsub,fmul,finv,sqrt,itof,ftoi,ロード/ストア : 1or2ストール(データハザード)
 - I/O禁止時 : nストール
 - I/O命令がそれぞれ連続するとき : 間に1ストール

 - mandelbrot : 55.6sec(送信バッファを大きくすれば短縮可能:52.9secまで確認済)
 - min-rt(contest) : 51.1sec(11.58億命令)

**ver2.5(core2_5)
01/18Fri開発終了
8段パイプライン : PC,IF,ID/RF,FW,EX1,EX2/MEM1,EX3/MEM2,WB
66MHz

 - 現在の最大動作周波数 : 74MHz
 - floor,itof,ftoiを3clkに
 - j,jl : 遅延1
 - branch不成立時 : 実質遅延なし(投機的実行)
 - jr,jlr : 遅延3
 - branch成立時 : 遅延4
 - データハザード : 最大3ストール
 - I/O禁止時 : nストール
 - I/O命令がそれぞれ連続するとき : 間に2ストール

 - mandelbrot : 52.47sec
 - min-rt(contest) : 44.77sec(11.58億命令)

**ver3.1(core3_1)
作業中(実装完了)
8段パイプライン : PC,IF,ID/RF,FW,EX1,EX2/MEM1,EX3/MEM2,WB
66MHz

 - Return Address Stackの導入
