1stアーキテクチャ
 - 計58命令
 - とりあえずfibが動くまではこれで実装する。
 - この先追加したい命令があったら2ndアーキテクチャで対応するということで。

****************************************************************

●データ表現
1word = 32bit
32bit符号つき整数
32bit単精度浮動小数点数
リトルエンディアン

●整数レジスタ
0     $zero     // 値を0固定(コアが0x00000000で初期化)
1     $v 	// 返値
2-25  $r2-$r25	// 汎用
26    $sw	// swap用
27    $cl	// closure用
28    $cp	// cmp用レジスタ
29    $gp	// グローバルポインタ(静的データへのアクセス用)
30    $sp	// スタックポインタ(コアが0x000FFFFFで初期化)
31    $ra	// 戻り番地(link register)

●浮動小数点数レジスタ
0-31  $f0-$f31

●命令形式
R-family : opcode(31-26),s(25-21),t(20-16),d(15-11),amt(10-6),func(5-0)
           レジスタ*3、シフト幅、機能コード
	    - R   : opcode,rs,rt,rd,amt,func
	    - FR  : opcode,fs,ft,fd,amt,func
	    - FR1 : opcode,rs,rt,fd,amt,func
	    - FR2 : opcode,fs,ft,rd,amt,func
I-family : opcode(31-26),s(25-21),t(20-16),imm(15-0)
           レジスタ*2、16bit即値
	    - I   : opcode,rs,rt,imm
	    - FI  : opcode,fs,ft,imm
	    - FI1 : opcode,rs,ft,imm
J-family : opcode(31-26),addr(25-0)
   	   26bit即値
	    - J  : opcode,addr

●算術演算命令
R   add    R[rd] = R[rs] + R[rt]
R   sub    R[rd] = R[rs] - R[rt]

FR  addf   F[fd] = F[fs] +. F[ft]
FR  subf   F[fd] = F[fs] -. F[ft]
FR  mulf   F[fd] = F[fs] *. F[ft]
FR  divf   F[fd] = F[fs] /. F[ft]

FR  sqrt   F[fd] = sqrt(F[fs])    // 平方根

I   addi   R[rt] = R[rs] + imm
I   subi   R[rt] = R[rs] - imm

●論理演算命令
R   and    R[rd] = R[rs] and R[rt]
R   or     R[rd] = R[rs] or  R[rt]
R   nor    R[rd] = R[rs] nor R[rt]
R   xor    R[rd] = R[rs] xor R[rt]

I   andi   R[rt] = R[rs] and imm
I   ori    R[rt] = R[rs] or  imm

●シフト命令
R   sll    R[rd] = R[rs] <<  amt    // shift left logical
R   srl    R[rd] = R[rs] >>  amt    // shift right logical
R   sra    R[rd] = R[rs] >>> amt    // shift right arith.

●比較命令
R   cmp    R[rd] = (R[rs] <= R[rt]) ? 1 : 0    // compare less than or equal
FR2 cmpf   R[rd] = (F[fs] <= F[ft]) ? 1 : 0

●移動命令
R   mvr    R[rd] = R[rs]    // move R-reg -> R-reg
FR  mvf    F[fd] = F[fs]    // move F-reg -> F-reg
FR1 mvrf   F[fd] = R[rs]    // move R-reg -> F-reg
FR2 mvfr   R[rd] = F[fs]    // move F-reg -> R-reg

●16bit即値代入命令    // @は連接
I   lui    R[rt] = imm @ R[rs]の下位16ビット    // load upper immidiate
I   lli    R[rt] = R[rs]の上位16ビット @ imm    // load lower immidiate
FI  luif   F[ft] = imm @ F[fs]の下位16ビット
FI  llif   F[ft] = F[fs]の上位16ビット @ imm

●ロード/ストア命令    // メモリはワードアクセス
R   lw     R[rd] = M[R[rs] + R[rt]]    // load word
R   sw     M[R[rs] + R[rt]] = R[rd]    // store word
I   lwi    R[rt] = M[R[rs] + imm]      // 即値は符号付き
I   swi    M[R[rs] + imm] = R[rt]

FR1 lwf    F[fd] = M[R[rs] + R[rt]]
FR1 swf    M[R[rs] + R[rt]] = F[fd]
FI1 lwif   F[ft] = M[R[rs] + imm]
FI1 swif   M[R[rs] + imm] = F[ft]

●I/O命令    // データ受信はワード単位、データ送信はバイト単位(メモリマップ方式は断念)
R   in     R[rd] = 受信データ
FR  inf    F[rd] = 受信データ

R   outa   送信データ = R[rs]の31-24    // 上位1バイト
R   outb   送信データ = R[rs]の23-16
R   outc   送信データ = R[rs]の15-8
R   outd   送信データ = R[rs]の7-0      // 下位1バイト(実際にレイトレが使うのはこれ)
FR  outaf  送信データ = F[rs]の31-24    // 上位1バイト
FR  outbf  送信データ = F[rs]の23-16
FR  outcf  送信データ = F[rs]の15-8
FR  outdf  送信データ = F[rs]の7-0      // 下位1バイト

●分岐命令    // 参照されるPCは次の命令のアドレス
J   j      PC = PCの31-26 @ addr              // jump
             // 2**26 = 67,108,864なのでPC{31:26}はおそらく全部0.
             // よってこの命令は絶対アドレスを指定してjumpするのにほぼ等しいか？[y_som]
J   jl     $ra = PC; PC = PCの31-26 @ addr    // jump and link
R   jr     PC = R[rs]                         // jump register
R   jlr    $ra = PC; PC = R[rs]               // jump and link register

I   beq    if (R[rs] == R[rt]) PC = PC + imm    // branch on equal
I   bne    if (R[rs] != R[rt]) PC = PC + imm    // branch on not equal
FI  beqf   if (F[fs] == F[ft]) PC = PC + imm
FI  bnef   if (F[fs] != F[ft]) PC = PC + imm

●疑似命令
    setl   レジスタにラベルアドレスを代入    // setl $r** label  ->  addi $r** $r0 addr

●その他
-   nop
-   halt   停止命令(実行終了)
-   dbg    シミュレータ用デバッグ命令(コアではレジスタ内容を送信する実装を検討中)
-   rst    リセット命令(実は要らないような気がしてきた…)
